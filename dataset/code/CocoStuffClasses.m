classdef CocoStuffClasses
    % CocoStuffClasses
    %
    % Semantic segmentation dataset for stuff classes in COCO
    %
    % Copyright by Holger Caesar, 2017
    
    properties (Constant)
        thingCount = 80;
        stuffCount = 91;
    end
    
    methods (Static)
        function[labelNames, labelCount] = getLabelNamesStuff()
            % [labelNames, labelCount] = getLabelNamesStuff()
            %
            % Note that the stuff labels are always sorted alphabetically !!!
            % Does not include "unlabeled" class!
            
            % Retrieve labels from hierarchy to make sure they match
            [~, categories, heights] = CocoStuffClasses.getClassHierarchyStuff();
            
            % Select only leaf nodes
            sel = heights == max(heights);
            categories = categories(sel);
            
            % Get stuff and thing labels
            labelNames = sort(categories);
            labelCount = numel(labelNames);
        end
        
        function[labelNames, labelCount] = getLabelNamesThings()
            % [labelNames, labelCount] = getLabelNamesThings()
            %
            % Note that the thing labels are in the original COCO order and
            % not sorted by alphabet !!!
            % Does not include "unlabeled" class!
            
            % Retrieve labels from hierarchy to make sure they match
            [~, categories, heights] = CocoStuffClasses.getClassHierarchyThings();
            
            % Select only leaf nodes
            sel = heights == max(heights);
            categories = categories(sel);
            
            % Get stuff and thing labels
            labelNames = sort(categories);
            labelCount = numel(labelNames);
        end
        
        function[labelNames, labelCount] = getLabelNamesThingsStuff()
            % [labelNames, labelCount] = getLabelNamesThingsStuff()
            %
            % Does not include "unlabeled" class!
            
            % Get stuff labels
            labelNamesStuff = CocoStuffClasses.getLabelNamesStuff();
            
            % Get thing labels
            labelNamesThings = CocoStuffClasses.getLabelNamesThings();
            
            % Concatenate both
            labelNames = [labelNamesThings; labelNamesStuff];
            labelCount = numel(labelNames);
        end
        
        function[nodes, categories, heights, parents] = getClassHierarchy()
            % Gets a hierarchies of all labels in CocoStuff (things+stuff)
            [~, ~, ~, parentsStuff] = CocoStuffClasses.getClassHierarchyStuff();
            [~, ~, ~, parentsThings] = CocoStuffClasses.getClassHierarchyThings();
            
            % Combine both subtrees
            parentsStuff{1, 2} = 'root';
            parentsThings{1, 2} = 'root';
            parents = [{'root'}, {'root'}; ...
                parentsThings; parentsStuff];
            
            % Convert to tree
            [nodes, categories, heights] = parentsToTrees(parents);
        end
        
        function[nodes, categories, heights, parents] = getClassHierarchyThings()
            % Returns a hierarchy of classes to be plotted with treeplot(nodes)
            
            parents = { ...
                'things', 'things'; ...
                ... % End of level 1
                'indoor-things', 'things'; ...
                'outdoor-things', 'things'; ...
                ... % End of level 2
                'person&accessory', 'outdoor-things'; ...
                'animal', 'outdoor-things'; ...
                'vehicle', 'outdoor-things'; ...
                'outdoor objects', 'outdoor-things'; ...
                'sports', 'outdoor-things'; ...
                'kitchenware', 'indoor-things'; ...
                'food-things', 'indoor-things'; ...
                'furniture-things', 'indoor-things'; ...
                'appliance', 'indoor-things'; ...
                'electronics', 'indoor-things'; ...
                'indoor objects', 'indoor-things'; ...
                ... % End of level 3
                'person', 'person&accessory'; ...
                'backpack', 'person&accessory'; ...
                'umbrella', 'person&accessory'; ...
                'handbag', 'person&accessory'; ...
                'tie', 'person&accessory'; ...
                'suitcase', 'person&accessory'; ...
                'bicycle', 'vehicle'; ...
                'car', 'vehicle'; ...
                'motorcycle', 'vehicle'; ...
                'airplane', 'vehicle'; ...
                'bus', 'vehicle'; ...
                'train', 'vehicle'; ...
                'truck', 'vehicle'; ...
                'boat', 'vehicle'; ...
                'traffic light', 'outdoor objects'; ...
                'fire hydrant', 'outdoor objects'; ...
                'stop sign', 'outdoor objects'; ...
                'parking meter', 'outdoor objects'; ...
                'bench', 'outdoor objects'; ...
                'bird', 'animal'; ...
                'cat', 'animal'; ...
                'dog', 'animal'; ...
                'horse', 'animal'; ...
                'sheep', 'animal'; ...
                'cow', 'animal'; ...
                'elephant', 'animal'; ...
                'bear', 'animal'; ...
                'zebra', 'animal'; ...
                'giraffe', 'animal'; ...
                'frisbee', 'sports'; ...
                'skis', 'sports'; ...
                'snowboard', 'sports'; ...
                'sports ball', 'sports'; ...
                'kite', 'sports'; ...
                'baseball bat', 'sports'; ...
                'baseball glove', 'sports'; ...
                'skateboard', 'sports'; ...
                'surfboard', 'sports'; ...
                'tennis racket', 'sports'; ...
                'bottle', 'kitchenware'; ...
                'wine glass', 'kitchenware'; ...
                'cup', 'kitchenware'; ...
                'fork', 'kitchenware'; ...
                'knife', 'kitchenware'; ...
                'spoon', 'kitchenware'; ...
                'bowl', 'kitchenware'; ...
                'banana', 'food-things'; ...
                'apple', 'food-things'; ...
                'sandwich', 'food-things'; ...
                'orange', 'food-things'; ...
                'broccoli', 'food-things'; ...
                'carrot', 'food-things'; ...
                'hot dog', 'food-things'; ...
                'pizza', 'food-things'; ...
                'donut', 'food-things'; ...
                'cake', 'food-things'; ...
                'chair', 'furniture-things'; ...
                'couch', 'furniture-things'; ...
                'potted plant', 'furniture-things'; ...
                'bed', 'furniture-things'; ...
                'dining table', 'furniture-things'; ...
                'toilet', 'furniture-things'; ...
                'tv', 'electronics'; ...
                'laptop', 'electronics'; ...
                'mouse', 'electronics'; ...
                'remote', 'electronics'; ...
                'keyboard', 'electronics'; ...
                'cell phone', 'electronics'; ...
                'microwave', 'appliance'; ...
                'oven', 'appliance'; ...
                'toaster', 'appliance'; ...
                'sink', 'appliance'; ...
                'refrigerator', 'appliance'; ...
                'hair drier', 'indoor objects'; ...
                'book', 'indoor objects'; ...
                'clock', 'indoor objects'; ...
                'vase', 'indoor objects'; ...
                'scissors', 'indoor objects'; ...
                'teddy bear', 'indoor objects'; ...
                'toothbrush', 'indoor objects'; ...
                };
            
            % Convert to tree
            [nodes, categories, heights] = parentsToTrees(parents);
        end
        
        function[nodes, categories, heights, parents] = getClassHierarchyStuff(~)
            % Returns a hierarchy of stuff classes to be plotted with treeplot(nodes)
            
            parents = { ...
                'stuff', 'stuff'; ...
                ... % End of level 1
                'indoor-stuff', 'stuff'; ...
                'outdoor-stuff', 'stuff'; ...
                ... % End of level 2
                'raw-material', 'indoor-stuff'; ...
                'wall', 'indoor-stuff'; ...
                'ceiling', 'indoor-stuff'; ...
                'floor', 'indoor-stuff'; ...
                'window', 'indoor-stuff'; ...
                'furniture-stuff', 'indoor-stuff'; ...
                'textile', 'indoor-stuff'; ...
                'food-stuff', 'indoor-stuff'; ...
                'building', 'outdoor-stuff'; ...
                'structural', 'outdoor-stuff'; ...
                'plant', 'outdoor-stuff'; ...
                'sky', 'outdoor-stuff'; ...
                'solid', 'outdoor-stuff'; ...
                'ground', 'outdoor-stuff'; ...
                'water', 'outdoor-stuff'; ...
                ... % End of level 3
                'cardboard', 'raw-material'; ...
                'paper', 'raw-material'; ...
                'plastic', 'raw-material'; ...
                'metal', 'raw-material'; ...
                'wall-tile', 'wall'; ...
                'wall-panel', 'wall'; ...
                'wall-wood', 'wall'; ...
                'wall-brick', 'wall'; ...
                'wall-stone', 'wall'; ...
                'wall-concrete', 'wall'; ...
                'wall-other', 'wall'; ...
                'ceiling-tile', 'ceiling'; ...
                'ceiling-other', 'ceiling'; ...
                'carpet', 'floor'; ...
                'floor-tile', 'floor'; ...
                'floor-wood', 'floor'; ...
                'floor-marble', 'floor'; ...
                'floor-stone', 'floor'; ...
                'floor-other', 'floor'; ...
                'window-blind', 'window'; ...
                'window-other', 'window'; ...
                'door', 'furniture-stuff'; ...
                'desk', 'furniture-stuff'; ...
                'table', 'furniture-stuff'; ...
                'shelf', 'furniture-stuff'; ...
                'cabinet', 'furniture-stuff'; ...
                'cupboard', 'furniture-stuff'; ...
                'mirror', 'furniture-stuff'; ...
                'counter', 'furniture-stuff'; ...
                'light', 'furniture-stuff'; ...
                'stairs', 'furniture-stuff'; ...
                'furniture-other', 'furniture-stuff'; ...
                'rug', 'textile'; ...
                'mat', 'textile'; ...
                'towel', 'textile'; ...
                'napkin', 'textile'; ...
                'clothes', 'textile'; ...
                'cloth', 'textile'; ...
                'curtain', 'textile'; ...
                'blanket', 'textile'; ...
                'pillow', 'textile'; ...
                'banner', 'textile'; ...
                'textile-other', 'textile'; ...
                'fruit', 'food-stuff'; ...
                'salad', 'food-stuff'; ...
                'vegetable', 'food-stuff'; ...
                'food-other', 'food-stuff'; ...
                ... % End of level 4 left
                'house', 'building'; ...
                'skyscraper', 'building'; ...
                'bridge', 'building'; ...
                'tent', 'building'; ...
                'roof', 'building'; ...
                'building-other', 'building'; ...
                'fence', 'structural'; ...
                'cage', 'structural'; ...
                'net', 'structural'; ...
                'railing', 'structural'; ...
                'structural-other', 'structural'; ...
                'grass', 'plant'; ...
                'tree', 'plant'; ...
                'bush', 'plant'; ...
                'leaves', 'plant'; ...
                'flower', 'plant'; ...
                'branch', 'plant'; ...
                'moss', 'plant'; ...
                'straw', 'plant'; ...
                'plant-other', 'plant'; ...
                'clouds', 'sky'; ...
                'sky-other', 'sky'; ...
                'wood', 'solid'; ...
                'rock', 'solid'; ...
                'stone', 'solid'; ...
                'mountain', 'solid'; ...
                'hill', 'solid'; ...
                'solid-other', 'solid'; ...
                'sand', 'ground'; ...
                'snow', 'ground'; ...
                'dirt', 'ground'; ...
                'mud', 'ground'; ...
                'gravel', 'ground'; ...
                'road', 'ground'; ...
                'pavement', 'ground'; ...
                'railroad', 'ground'; ...
                'platform', 'ground'; ...
                'playingfield', 'ground'; ...
                'ground-other', 'ground'; ...
                'fog', 'water'; ...
                'river', 'water'; ...
                'sea', 'water'; ...
                'waterdrops', 'water'; ...
                'water-other', 'water'; ...
                };
            
            % Convert to tree
            [nodes, categories, heights] = parentsToTrees(parents);
        end
        
        function[nodes, categories, heights, parents] = getClassHierarchyStuffThings()
            % [nodes, categories, heights, parents] = getClassHierarchyStuffThings()
            
            % Get stuff and thing subtrees
            [~, ~, ~, parentsS] = CocoStuffClasses.getClassHierarchyStuff();
            [~, ~, ~, parentsT] = CocoStuffClasses.getClassHierarchyThings();
            
            % Add root node which holds both subtrees
            parentsS{1, 2} = 'root';
            parentsT{1, 2} = 'root';
            parents = [{'root', 'root'}; parentsT; parentsS];
            
            % Convert to tree
            [nodes, categories, heights] = parentsToTrees(parents);
        end
        
        function[stuffLabels, thingLabels, stuffLabelInds, thingLabelInds] = getStuffThingLabels()
            % [stuffLabels, thingLabels, stuffLabelInds, thingLabelInds] = getStuffThingLabels()
            %
            % Note that "unlabeled" is neither thing nor stuff!
            
            % Get all stuff and thing labels
            [stuffLabelsAll, thingLabelsAll] = CocoStuffClasses.getStuffThingLabelsAll();
            
            % Limit to classes used in current annotation
            labelNames = CocoStuffClasses.getLabelNamesThingsStuff();
            thingLabelInds = find(ismember(labelNames, thingLabelsAll));
            stuffLabelInds = find(ismember(labelNames, stuffLabelsAll));
            thingLabels = labelNames(thingLabelInds);
            stuffLabels = labelNames(stuffLabelInds);
            
            % Check consistency
            allInds = [1; thingLabelInds; stuffLabelInds];
            assert(isequal(allInds, unique(allInds)));
        end
        
        function[stuffLabels, thingLabels, stuffLabelInds, thingLabelInds] = getStuffThingLabelsAll()
            % [stuffLabels, thingLabels, stuffLabelInds, thingLabelInds] = getStuffThingLabels()
            %
            % Note that "unlabeled" is neither thing nor stuff!
            
            labelNamesAll = ['unlabeled'; CocoStuffClasses.getLabelNamesThingsStuff()];
            thingLabelInds = (1 + 1 : CocoStuffClasses.thingCount + 1)';
            stuffLabelInds = (1 + CocoStuffClasses.thingCount + 1 : numel(labelNamesAll))';
            thingLabels = labelNamesAll(thingLabelInds);
            stuffLabels = labelNamesAll(stuffLabelInds);
            
            % Check consistency
            allInds = [1; thingLabelInds; stuffLabelInds];
            assert(isequal(allInds, unique(allInds)));
        end
        
        function[dists] = hierarchyDistances()
            % [dists] = hierarchyDistances()
            %
            % Returns a symmetric matrix of pairwise distances between
            % labels i and j, where the distance function is the path
            % length between i and j in the hierarchy.
            
            % Get dataset label hierarchy
            [nodes, categories, heights, ~] = CocoStuffClasses.getClassHierarchy();
            
            % Init
            nodeCount = numel(nodes);
            distsN = zeros(nodeCount, nodeCount);
            
            for i = 2 : nodeCount % skip "unlabeled" class
                for j = i + 1 : nodeCount
                    distI = 0;
                    distJ = 0;
                    curI = i;
                    curJ = j;
                    while curI ~= curJ
                        if heights(curI) < heights(curJ)
                            % Go to parent of j
                            curJ = nodes(curJ);
                            distJ = distJ + 1;
                        elseif heights(curI) > heights(curJ)
                            % Go to parent of i
                            curI = nodes(curI);
                            distI = distI + 1;
                        else
                            % Go to parent of j
                            curJ = nodes(curJ);
                            distJ = distJ + 1;
                            
                            % Go to parent of i
                            curI = nodes(curI);
                            distI = distI + 1;
                        end
                    end
                    % The final distance is the sum of both distances
                    dist = distI + distJ;
                    
                    distsN(i, j) = dist;
                    distsN(j, i) = dist;
                end
            end
            
            % Remove all inner nodes of the tree
            labelNames = CocoStuffClasses.getLabelNamesThingsStuff();
            relInds = indicesOfAInB(labelNames(2:end), categories);
            distsN = distsN(relInds, relInds);
            
            % Add "unlabeled" class with largest distance to any label
            maxDist = max(distsN(:));
            dists = nan(size(distsN) + 1);
            dists(2:end, 2:end) = distsN;
            dists(1, 2:end) = maxDist + 1;
            dists(2:end, 1) = maxDist + 1;
            dists(1, 1) = 0;
        end
        
        function showClassHierarchyStuff()
            % showClassHierarchyStuff()
            
            [nodes, cats] = CocoStuffClasses.getClassHierarchyStuff();
            plotTree(nodes, cats);
        end
        
        function showClassHierarchyThings()
            % showClassHierarchyThings()
            
            [nodes, cats] = CocoStuffClasses.getClassHierarchyThings();
            plotTree(nodes, cats);
        end
        
        function showClassHierarchyStuffThings()
            % showClassHierarchyStuffThings()
            
            [nodes, cats] = CocoStuffClasses.getClassHierarchyStuffThings();
            
            % Start figure
            figLabelHierarchy = figure();
            
            % Plot label hierarchy
            plotTree(nodes, cats, 1, figLabelHierarchy);
            plotTree(nodes, cats, -1, figLabelHierarchy);
            
            % Set figure size
            pos = get(figLabelHierarchy, 'Position');
            newPos = pos;
            newPos(3) = 1000;
            newPos(4) = 1000;
            set(figLabelHierarchy, 'Position', newPos);
        end
    end
end